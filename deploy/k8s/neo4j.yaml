apiVersion: v1
kind: Service
metadata:
  name: neo4j
  namespace: ${NAMESPACE:-dtp}
spec:
  selector: { app: neo4j }
  ports:
  - { name: bolt, port: 7687, targetPort: 7687 }
  - { name: http, port: 7474, targetPort: 7474 }
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: neo4j
  namespace: ${NAMESPACE:-dtp}
spec:
  serviceName: neo4j
  replicas: 1
  selector: { matchLabels: { app: neo4j } }
  template:
    metadata: { labels: { app: neo4j } }
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role
                operator: In
                values: ["dtp-core"]
      containers:
      - name: neo4j
        image: neo4j:5.22-community
        ports:
        - { containerPort: 7687, name: bolt }
        - { containerPort: 7474, name: http }
        env:
        - name: NEO4J_AUTH
          valueFrom: { secretKeyRef: { name: neo4j-auth, key: NEO4J_AUTH } }
        - { name: NEO4J_dbms_memory_heap_initial__size, value: 2G }
        - { name: NEO4J_dbms_memory_heap_max__size, value: 4G }
        volumeMounts:
        - { name: data, mountPath: /data }
  volumeClaimTemplates:
  - metadata: { name: data }
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: pd-ssd-rwo
      resources: { requests: { storage: ${NEO4J_STORAGE_GI}Gi } }
