apiVersion: v1
kind: Service
metadata:
  name: influxdb
  namespace: ${NAMESPACE:-dtp}
spec:
  selector: { app: influxdb }
  ports:
  - { port: 8086, targetPort: 8086, name: http }
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: influxdb
  namespace: ${NAMESPACE:-dtp}
spec:
  serviceName: influxdb
  replicas: 1
  selector: { matchLabels: { app: influxdb } }
  template:
    metadata: { labels: { app: influxdb } }
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role
                operator: In
                values: ["dtp-core"]
      containers:
      - name: influxdb
        image: influxdb:2.7
        ports: [ { containerPort: 8086, name: http } ]
        env:
        - { name: DOCKER_INFLUXDB_INIT_MODE, value: setup }
        - { name: DOCKER_INFLUXDB_INIT_USERNAME, value: admin }
        - name: DOCKER_INFLUXDB_INIT_PASSWORD
          valueFrom: { secretKeyRef: { name: django-secret, key: DJANGO_SECRET_KEY } }
        - { name: DOCKER_INFLUXDB_INIT_ORG, value: dtp }
        - { name: DOCKER_INFLUXDB_INIT_BUCKET, value: dtp }
        - name: DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
          valueFrom: { secretKeyRef: { name: influx-creds, key: INFLUX_TOKEN } }
        volumeMounts:
        - { name: data, mountPath: /var/lib/influxdb2 }
  volumeClaimTemplates:
  - metadata: { name: data }
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: pd-ssd-rwo
      resources: { requests: { storage: ${INFLUX_STORAGE_GI}Gi } }
