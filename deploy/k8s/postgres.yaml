apiVersion: v1
kind: Service
metadata:
  name: pg
  namespace: ${NAMESPACE:-dtp}
spec:
  selector: { app: pg }
  ports: [ { port: 5432, targetPort: 5432 } ]
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pg
  namespace: ${NAMESPACE:-dtp}
spec:
  serviceName: pg
  replicas: 1
  selector: { matchLabels: { app: pg } }
  template:
    metadata: { labels: { app: pg } }
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role
                operator: In
                values: ["dtp-core"]
      containers:
      - name: postgres
        image: timescale/timescaledb-ha:pg15-latest
        ports: [ { containerPort: 5432 } ]
        env:
        - { name: POSTGRES_DB,   value: dtp }
        - { name: POSTGRES_USER, value: postgres }
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef: { name: django-secret, key: DJANGO_SECRET_KEY }
        resources:
          requests: { cpu: "2", memory: "6Gi" }
          limits:   { cpu: "4", memory: "8Gi" }
        volumeMounts:
        - { name: data, mountPath: /var/lib/postgresql/data }
  volumeClaimTemplates:
  - metadata: { name: data }
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: pd-ssd-rwo
      resources: { requests: { storage: ${PG_STORAGE_GI}Gi } }
