apiVersion: batch/v1
kind: CronJob
metadata:
  name: pg-backup
  namespace: ${NAMESPACE:-dtp}
spec:
  schedule: "0 2 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: dump
            image: bitnami/postgresql:15
            env:
            - { name: PGPASSWORD, valueFrom: { secretKeyRef: { name: django-secret, key: DJANGO_SECRET_KEY } } }
            command: ["/bin/sh","-lc"]
            args:
            - |
              pg_dump -h pg -U postgres -F c -d dtp > /tmp/backup.dump
              gsutil cp /tmp/backup.dump ${GCS_BUCKET}/pg/$(date +%F).dump
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: influx-backup
  namespace: ${NAMESPACE:-dtp}
spec:
  schedule: "30 2 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: backup
            image: alpine:3.20
            command: ["/bin/sh","-lc"]
            args:
            - |
              echo "Implement Influx v2 backup via CLI or API here."
              mkdir -p /tmp/influx
              gsutil -m cp -r /tmp/influx ${GCS_BUCKET}/influx/$(date +%F)/
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: neo4j-backup
  namespace: ${NAMESPACE:-dtp}
spec:
  schedule: "0 3 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: backup
            image: neo4j:5.22-community
            command: ["/bin/sh","-lc"]
            args:
            - |
              echo "neo4j-admin backup requires enterprise or alternative export; customize as needed."
              touch /tmp/neo4j-backup.txt
              gsutil cp /tmp/neo4j-backup.txt ${GCS_BUCKET}/neo4j/$(date +%F).txt
